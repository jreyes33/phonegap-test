// Generated by CoffeeScript 1.3.3
(function() {
  var $, appDir, appDirError, appDirSuccess, backupFileError, backupFileSuccess, backupFsError, backupFsSuccess, checkedContacts, contactError, contactSuccess, fillBackupList, loadedContacts, readBackupsError, readBackupsSuccess, restoreBackup, updateCount, updateList;

  $ = jQuery;

  appDir = null;

  checkedContacts = null;

  loadedContacts = null;

  updateCount = function() {
    switch ($('#show-filter-fieldset :checked').val()) {
      case 'all':
        return $('#count-info').text("" + ($('#valid-contacts li :checked').length) + " de " + ($('#valid-contacts li :checkbox').length));
      case 'only-checked':
        return $('#count-info').text("" + ($('#valid-contacts li :checkbox:visible').length));
      case 'only-unchecked':
        return $('#count-info').text("" + ($('#valid-contacts li :checkbox:visible').length));
    }
  };

  updateList = function() {
    $('#valid-contacts li, #valid-contacts li .ui-checkbox').show();
    switch ($('#show-filter-fieldset :checked').val()) {
      case 'only-checked':
        $('#valid-contacts li :checkbox:not(:checked)').parents('.ui-checkbox').hide();
        break;
      case 'only-unchecked':
        $('#valid-contacts li :checkbox:checked').parents('.ui-checkbox').hide();
    }
    $('#valid-contacts li:not(:has(.ui-checkbox:visible))').hide();
    return updateCount();
  };

  restoreBackup = function() {
    var item, _i, _len, _ref, _results;
    if (confirm("¿Está seguro que desea revertir los " + ($(this).children('.ui-li-count').text()) + " cambios realizados en la fecha indicada?")) {
      _ref = $(this).data('backup');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        loadedContacts[item.contactIdx].phoneNumbers[item.numberIdx].value = item.oldNumber;
        _results.push(loadedContacts[item.contactIdx].save(function() {
          return console.log("Saved contact " + retObj.contactId + "-" + retObj.numberIdx);
        }, function(err) {
          return console.log("ERRCODE: " + (JSON.stringify(err)) + ", error saving contact " + retObj.contactId + "-" + retObj.numberIdx);
        }));
      }
      return _results;
    }
  };

  readBackupsSuccess = function(entries) {
    var $backupList, entry, matches, _i, _len;
    $backupList = $();
    for (_i = 0, _len = entries.length; _i < _len; _i++) {
      entry = entries[_i];
      if (entry.isFile && (matches = entry.name.match(/^backup\-(\d{13})\.json$/))) {
        entry.file(function(file) {
          var reader;
          reader = new FileReader();
          reader.onload = function(e) {
            var $backup, backupData, date;
            backupData = JSON.parse(e.target.result);
            date = matches[1];
            $backup = $("<li>\n  <a href=\"#\" class=\"restore-backup\">\n    " + (date.getFullYear()) + "-" + (date.getMonth() + 1) + "-" + (date.getDate()) + " " + (date.getHours()) + ":" + (date.getMinutes()) + ":" + (date.getSeconds()) + "\n    <span class=\"ui-li-count\">" + backupData.length + "</span>\n  </a>\n</li>");
            $backup.find('.restore-backup').data('backup', backupData);
            return $backupList.add($backup);
          };
          reader.onerror = function(e) {
            return console.log("ERROR reading backup file: " + err.code);
          };
          return reader.readAsText(file);
        }, function(err) {
          return console.log("ERROR obtaining file object: " + err.code);
        });
      }
    }
    return $('#backup-list').append($backupList);
  };

  readBackupsError = function(err) {};

  fillBackupList = function() {
    return appDir.createReader().readEntries(readBackupsSuccess, readBackupsError);
  };

  backupFsSuccess = function(fileSystem) {
    return fileSystem.root.getDirectory('org.jreyes.actualizame', {
      create: true
    }, appDirSuccess, appDirError);
  };

  backupFsError = function(err) {
    return console.log("ERROR getting the filesystem: " + err.code);
  };

  appDirSuccess = function(directoryEntry) {
    appDir = directoryEntry;
    return fillBackupList();
  };

  appDirError = function(err) {
    appDir = null;
    return console.log("ERROR getting the app directory: " + err.code);
  };

  backupFileSuccess = function(fileEntry) {
    return fileEntry.createWriter(function(writer) {
      writer.onwrite = function(e) {};
      writer.onerror = function(e) {};
      writer.truncate(0);
      return writer.write(checkedContacts.get());
    }, function(err) {
      return console.log("ERROR writing to backup file: " + err.code);
    });
  };

  backupFileError = function(err) {
    return console.log("ERROR creating the backup file: " + err.code);
  };

  contactSuccess = function(contacts) {
    var $contact, $contactList, checked, contact, i, j, number, phoneNumber, _i, _j, _len, _len1, _ref;
    loadedContacts = contacts;
    $contactList = $();
    if (loadedContacts != null) {
      for (i = _i = 0, _len = loadedContacts.length; _i < _len; i = ++_i) {
        contact = loadedContacts[i];
        if (contact.name == null) {
          continue;
        }
        $contact = $("<li>\n  <h3>" + contact.name.formatted + "</h3>\n  <fieldset data-mini=\"true\"></fieldset>\n</li>");
        if (contact.phoneNumbers != null) {
          _ref = contact.phoneNumbers;
          for (j = _j = 0, _len1 = _ref.length; _j < _len1; j = ++_j) {
            number = _ref[j];
            phoneNumber = new PhoneNumber(number.value);
            switch (phoneNumber.isUpdatableEcuadorianMobile()) {
              case 'yes':
                checked = 'checked';
                break;
              case 'maybe':
                checked = '';
                break;
              case 'no':
                continue;
            }
            $contact.children('fieldset').append("<label>\n  <input type=\"checkbox\" name=\"contacts[" + contact.id + "][" + j + "]\" " + checked + " data-theme=\"b\"\n    data-idx=\"" + i + "\" data-old-number=\"" + phoneNumber.value + "\"\n    data-new-number=\"" + (phoneNumber.updateEcuadorianMobile(true)) + "\">\n  [" + contact.id + "][" + j + "] " + number.type + ": " + number.value + "\n</label>");
          }
          if ($contact.find('label').length) {
            $contactList = $contactList.add($contact);
          }
        }
      }
    }
    if ($contactList.length) {
      $('#valid-contacts').append($contactList.tsort());
      $('#contacts .footer').show();
      updateCount();
    } else {
      $('#contacts-content').html('<p>No se cargó ningún contacto.</p>');
      $('#contacts .footer').hide();
    }
    return $('#contacts').on('tap', '#update-button', function() {
      checkedContacts = $('#valid-contacts li :checkbox:checked').map(function() {
        var matches, retObj;
        matches = $(this).attr('name').match(/\[(\d+)\]\[(\d+)\]/);
        retObj = {
          contactId: matches[1],
          contactIdx: $(this).data('idx'),
          numberIdx: matches[2],
          oldNumber: $(this).attr('data-old-number'),
          newNumber: $(this).attr('data-new-number')
        };
        loadedContacts[retObj.contactIdx].phoneNumbers[retObj.numberIdx].value = retObj.newNumber;
        loadedContacts[retObj.contactIdx].save(function() {
          return console.log("Saved contact " + retObj.contactId + "-" + retObj.numberIdx);
        }, function(err) {
          return console.log("ERRCODE: " + (JSON.stringify(err)) + ", error saving contact " + retObj.contactId + "-" + retObj.numberIdx);
        });
        return retObj;
      });
      if (appDir != null) {
        return appDir.getFile("backup-" + (Date.now()) + ".json", {
          create: true
        }, backupFileSuccess, backupFileError);
      }
    });
  };

  contactError = function(err) {
    return $('#contacts-content').html("<p>Error al cargar los contactos: " + err.code + "</p>");
  };

  $(document).on('deviceready', function() {
    navigator.contacts.find(["*"], contactSuccess, contactError);
    return window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, backupFsSuccess, backupFsError);
  });

  /*
   * jQuery Mobile events
  */


  $(document).on('mobileinit', function() {
    $.mobile.ajaxEnabled = false;
    $.mobile.buttonMarkup.hoverDelay = 100;
    $.mobile.defaultPageTransition = 'none';
    return $.mobile.pushStateEnabled = false;
  });

  $(document).on('pageinit', function() {});

  $(document).on('pagechange', function() {});

  $(function() {
    $('#contacts').on('change', '#valid-contacts li :checkbox', updateCount);
    $('#contacts').on('change', '#show-filter-fieldset input', updateList);
    return $('#backups').on('tap', '.restore-backup', restoreBackup);
  });

}).call(this);
